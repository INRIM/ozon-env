# generated by datamodel-codegen:
#   filename:  prodotti.json
#   timestamp: 2022-12-02T14:59:41+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any
from typing import Dict
from typing import List
from typing import Optional

from pydantic import Field

from ozonenv.core.BaseModels import BasicModel


class Prodotti(BasicModel):
    _id: Optional[str] = Field(None, title=' Id')
    data_model: Optional[str] = Field('', title='Data Model')
    rec_name: Optional[str] = Field('', title='Rec Name')
    app_code: Optional[List] = Field([], title='App Code')
    parent: Optional[str] = Field('', title='Parent')
    process_id: Optional[str] = Field('', title='Process Id')
    process_task_id: Optional[str] = Field('', title='Process Task Id')
    data_value: Optional[Dict[str, Any]] = Field({}, title='Data Value')
    owner_name: Optional[str] = Field('', title='Owner Name')
    deleted: Optional[int] = Field(0, title='Deleted')
    list_order: Optional[int] = Field(0, title='List Order')
    owner_uid: Optional[str] = Field('', title='Owner Uid')
    owner_mail: Optional[str] = Field('', title='Owner Mail')
    owner_function: Optional[str] = Field('', title='Owner Function')
    owner_function_type: Optional[str] = Field('', title='Owner Function Type')
    owner_sector: Optional[str] = Field('', title='Owner Sector')
    owner_sector_id: Optional[int] = Field(0, title='Owner Sector Id')
    owner_personal_type: Optional[str] = Field('', title='Owner Personal Type')
    owner_job_title: Optional[str] = Field('', title='Owner Job Title')
    update_uid: Optional[str] = Field('', title='Update Uid')
    sys: Optional[bool] = Field(False, title='Sys')
    default: Optional[bool] = Field(False, title='Default')
    active: Optional[bool] = Field(True, title='Active')
    demo: Optional[bool] = Field(False, title='Demo')
    childs: Optional[List[Dict[str, Any]]] = Field([], title='Childs')
    create_datetime: Optional[datetime] = Field(
        '1970-01-01T00:00:00', title='Create Datetime'
    )
    update_datetime: Optional[datetime] = Field(
        '1970-01-01T00:00:00', title='Update Datetime'
    )
    status: Optional[str] = Field('ok', title='Status')
    message: Optional[str] = Field('', title='Message')
    res_data: Optional[Dict[str, Any]] = Field({}, title='Res Data')
    label: Optional[str] = Field('', title='Label')

        
    @classmethod
    def get_unique_fields(cls):
        return ['rec_name']
        
    @classmethod
    def computed_fields(cls):
        return {}
    
    @classmethod
    def no_clone_field_keys(cls):
        return ['rec_name']
    
    @classmethod
    def tranform_data_value(cls):
        return {}    
    
    @classmethod
    def fields_limit_value(cls):
        return {}     
    
    @classmethod
    def create_task_action(cls):
        return []
    
    @classmethod
    def fields_properties(cls):
        return {}
        
    @classmethod
    def default_hidden_fields(cls):
        return []

    @classmethod
    def default_readonly_fields(cls):
        return []
    
    @classmethod
    def default_required_fields(cls):
        return []   
         
    @classmethod
    def filter_keys(cls):
        return ['rec_name', 'label']  
         
    @classmethod
    def config_fields(cls):
        return {'rec_name': {'disabled': False, 'readonly': False, 'hidden': False, 'required': False, 'unique': False, 'component': 'Component', 'calculateServer': None, 'action_type': False, 'no_clone': False, 'transform': {}, 'datetime': False, 'min': False, 'max': False}, 'label': {'disabled': False, 'readonly': False, 'hidden': False, 'required': False, 'unique': False, 'component': 'Component', 'calculateServer': None, 'action_type': False, 'no_clone': False, 'transform': {}, 'datetime': False, 'min': False, 'max': False}}
         
    @classmethod
    def components_ext_data_src(cls):
        return []
    
    @classmethod
    def get_data_model(cls):
        return ""
    
