# generated by datamodel-codegen:
#   filename:  prodotti.json
#   timestamp: 2024-02-07T13:33:10+00:00

from __future__ import annotations

from typing import Optional

from pydantic import Field

from ozonenv.core.BaseModels import BasicModel


class Prodotti(BasicModel):
    rec_name: Optional[str] = Field('', title='Rec Name')
    label: Optional[str] = Field('', title='Label')
    quantity: Optional[int] = Field(0, title='Quantity')
    tot: Optional[float] = Field(0.0, title='Tot')
    price: Optional[float] = Field(0.0, title='Price')

    
    @classmethod
    def get_version(cls):
        return '1970-01-01T00:00:00'
        
    @classmethod
    def get_unique_fields(cls):
        return ['rec_name']
        
    @classmethod
    def computed_fields(cls):
        return {}
    
    @classmethod
    def no_clone_field_keys(cls):
        return ['rec_name']
    
    @classmethod
    def tranform_data_value(cls):
        return {'tot': {'type': 'float', 'dp': 2, 'mask': 'decimal', 'dps': ','}, 'price': {'type': 'float', 'dp': 2, 'mask': 'decimal', 'dps': ','}}    
    
    @classmethod
    def fields_limit_value(cls):
        return {}     
    
    @classmethod
    def create_task_action(cls):
        return []
    
    @classmethod
    def fields_properties(cls):
        return {}
        
    @classmethod
    def default_hidden_fields(cls):
        return []

    @classmethod
    def default_readonly_fields(cls):
        return []
    
    @classmethod
    def default_required_fields(cls):
        return []   
         
    @classmethod
    def filter_keys(cls):
        return ['rec_name', 'label', 'quantity', 'tot', 'price']  
         
    @classmethod
    def config_fields(cls):
        return {'rec_name': {'ctype': 'textfield', 'disabled': False, 'readonly': False, 'hidden': False, 'required': False, 'unique': False, 'component': 'Component', 'calculateServer': None, 'action_type': False, 'no_clone': False, 'transform': {}, 'datetime': False, 'min': False, 'max': False}, 'label': {'ctype': 'textfield', 'disabled': False, 'readonly': False, 'hidden': False, 'required': False, 'unique': False, 'component': 'Component', 'calculateServer': None, 'action_type': False, 'no_clone': False, 'transform': {}, 'datetime': False, 'min': False, 'max': False}, 'quantity': {'ctype': 'number', 'disabled': False, 'readonly': False, 'hidden': False, 'required': False, 'unique': False, 'component': 'Component', 'calculateServer': None, 'action_type': False, 'no_clone': False, 'transform': {}, 'datetime': False, 'min': False, 'max': False}, 'tot': {'ctype': 'number', 'disabled': False, 'readonly': False, 'hidden': False, 'required': False, 'unique': False, 'component': 'Component', 'calculateServer': None, 'action_type': False, 'no_clone': False, 'transform': {'type': 'float', 'dp': 2, 'mask': 'decimal', 'dps': ','}, 'datetime': False, 'min': None, 'max': None, 'mask': 'decimal', 'delimiter': ',', 'dp': 2}, 'price': {'ctype': 'number', 'disabled': False, 'readonly': False, 'hidden': False, 'required': False, 'unique': False, 'component': 'Component', 'calculateServer': None, 'action_type': False, 'no_clone': False, 'transform': {'type': 'float', 'dp': 2, 'mask': 'decimal', 'dps': ','}, 'datetime': False, 'min': None, 'max': None, 'mask': 'decimal', 'delimiter': ',', 'dp': 2}} 
             
    @classmethod
    def all_fields(cls) -> list:
        return [{'label': 'Nome', 'spellcheck': False, 'tableView': True, 'key': 'rec_name', 'type': 'textfield', 'input': True, 'properties': {}, 'validate': {}}, {'label': 'Descrizione', 'tableView': True, 'key': 'label', 'type': 'textfield', 'input': True, 'properties': {}, 'validate': {}}, {'label': 'Qt', 'tableView': True, 'key': 'quantity', 'type': 'number', 'input': True, 'properties': {}, 'validate': {}}, {'label': 'Tot', 'tableView': True, 'key': 'tot', 'type': 'number', 'requireDecimal': True, 'input': True, 'properties': {}, 'validate': {}}, {'label': 'Price', 'tableView': True, 'key': 'price', 'type': 'number', 'requireDecimal': True, 'input': True, 'properties': {}, 'validate': {}}]      
               
    @classmethod
    def table_columns(cls) -> dict:
        return {'rec_name': 'Nome', 'label': 'Descrizione', 'quantity': 'Qt', 'tot': 'Tot', 'price': 'Price'}
         
    @classmethod
    def components_ext_data_src(cls):
        return []
    
    @classmethod
    def get_data_model(cls):
        return ""
    
    @classmethod
    def conditional(cls) -> {str, dict}:
        return {}

    @classmethod
    def logic(cls) -> {str, list}:
        return {}
    
    @classmethod
    def conditional(cls) -> {str, dict}:
        return {}

    @classmethod
    def logic(cls) -> {str, list}:
        return {}
